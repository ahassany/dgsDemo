plugins {
	id 'org.springframework.boot' version '2.5.1'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.netflix.dgs.codegen" version "4.6.6"
	id 'java'
}

group = 'ps.hassany'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
	mavenCentral()
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

compileJava {
	options.compilerArgs += [
	        '-Amapstruct.defaultComponentModel=spring'
	]
}

generateJava{
	schemaPaths = ["${projectDir}/src/main/resources/schema"] // List of directories containing schema files
	packageName = 'ps.hassany.dgsDemo' // The package name to use to generate sources
	generateClient = true // Enable generating the type safe query API
}

dependencies {
	implementation(platform("com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:latest.release"))
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'
	implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter:latest.release"
	implementation 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation 'org.mapstruct:mapstruct:1.4.2.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
	testAnnotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
	useJUnitPlatform()
}
